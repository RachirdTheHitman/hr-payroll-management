{"version":3,"sources":["components/HomePage.js","components/Payslip.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","history","className","src","alt","onClick","push","Payslip","data","postDataFetch","getDataFetch","firstname","lastname","splicedData","Object","values","splice","i","length","concat","Table","color","key","Body","map","title","Row","Cell","id","Button","Dashboard","state","isSubmitted","superrate","paydate","payfreq","annualsalary","grossIncome","incomeTax","netIncome","super","pay","handleInputChange","evt","setState","target","name","value","calculatePayslip","console","log","Math","floor","ceil","moment","format","handleSubmission","preventDefault","a","fetch","headers","response","json","method","body","JSON","stringify","this","Grid","Column","witdth","Segment","Form","onSubmit","Group","widths","Input","onChange","type","fluid","label","placeholder","Component","App","exact","path","component","render","Container","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb9aefab.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst HomePage = ({history}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"ui inverted vertical masthead center aligned segment\">\r\n        <div className=\"ui text container\">\r\n          <h1 className=\"ui inverted stackable header\">\r\n            <img\r\n              className=\"ui image massive\"\r\n              src=\"https://www.computeralliance.com.au/InventoryImages_376/20319.jpg\"\r\n              alt=\"logo\"\r\n            />\r\n            <div className=\"content\">Payroll System</div>\r\n          </h1>\r\n          <h2>Manage payroll with ease!</h2>\r\n          <div onClick={() => history.push('/Dashboard')} className=\"ui huge white inverted button\">\r\n            Get Started\r\n            <i className=\"right arrow icon\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { Table, Button } from \"semantic-ui-react\";\r\n\r\nconst Payslip = ({ data, getDataFetch, postDataFetch }) => {\r\n  const { firstname, lastname } = data;\r\n  const titles = [\r\n    \"Pay Date\",\r\n    \"Pay Frequency\",\r\n    \"Annual Income\",\r\n    \"Gross Income\",\r\n    \"Income tax\",\r\n    \"Net Income\",\r\n    \"Super\",\r\n    \"Pay\"\r\n  ];\r\n  const splicedData = Object.values(data).splice(4, 8);\r\n  for (let i = 2; i < splicedData.length; i++) {\r\n    splicedData[i] = \"$\".concat(splicedData[i], \".00\");\r\n  }\r\n  // console.log(splicedData);\r\n  // console.log(data);\r\n\r\n//   const getDataFetch = async () => {\r\n//     const response =\r\n//       await fetch(\"https://richard-nodeapi-test.herokuapp.com/users\",\r\n//         { headers: {'Content-Type': 'application/json'}}\r\n//       )\r\n//     console.log(await response.json())\r\n// }\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {firstname} {lastname}\r\n      </h1>\r\n      <Table color=\"purple\" key=\"purple\">\r\n        <Table.Body>\r\n          {/* {Object.keys(data).map((key, i) => ( */}\r\n          {titles.map((title, i) => (\r\n            <Table.Row key={i}>\r\n              <Table.Cell>{title}</Table.Cell>\r\n              <Table.Cell>{splicedData[i]}</Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n      <div id=\"pay-div\">\r\n        <Button onClick={postDataFetch} color=\"blue\">Pay</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payslip;\r\n\r\n// class Payslip extends Component {\r\n//   state = {\r\n//     paydate: \"\",\r\n//     payfreq: \"\",\r\n//     annualIncome: \"\",\r\n//     grossIncome: \"\",\r\n//     incomeTax: \"\",\r\n//     netIncome: \"\",\r\n//     super: \"\",\r\n//     pay: \"\",\r\n//     superrate: \"\"\r\n//   };\r\n\r\n// calculatePayslip = () => {\r\n//   const {annualsalary, superrate } = data;\r\n//   this.setState({ annualIncome: annualsalary, superrate });\r\n\r\n//   switch (annualIncome) {\r\n//     case 0 <= annualIncome && annualIncome <= 18200:\r\n//       this.setState({ grossIncome: Math.floow(annualIncome / 12) });\r\n//       this.setState({ incomeTax: 0 });\r\n//       this.setState({ netIncome: Math.floow(annualIncome / 12) });\r\n//       this.setState({ super: Math.floow((annualIncome / 12) * 0.09) });\r\n//       this.setState({\r\n//         pay:\r\n//           Math.floow(annualIncome / 12) -\r\n//           Math.floow((annualIncome / 12) * 0.09)\r\n//       });\r\n//       console.log(this.state);\r\n//       break;\r\n\r\n//     case 18201 <= annualIncome && annualIncome <= 37000:\r\n//       this.setState({ incomeTax: 0 });\r\n//       break;\r\n\r\n//     case 37001 <= annualIncome && annualIncome <= 80000:\r\n//       this.setState({ incomeTax: 0 });\r\n//       break;\r\n\r\n//     case 80001 <= annualIncome && annualIncome <= 180000:\r\n//       this.setState({ incomeTax: 0 });\r\n//       break;\r\n\r\n//     case 180001 <= annualIncome:\r\n//       this.setState({ incomeTax: 0 });\r\n//       break;\r\n\r\n//     default:\r\n//       break;\r\n//   }\r\n\r\n//   return;\r\n// };\r\n\r\n// render() {\r\n// const { firstname, lastname, annualsalary, superrate } = this.props.data;\r\n// const data = this.props.data;\r\n// const { firstname, lastname, annualsalary, superrate } = data;\r\n// this.calculatePayslip();\r\n\r\n// console.log(this.props);\r\n// console.log(moment().format(\"DD MMMM gggg\"))\r\n//{moment().format(\"DD MMMM gggg\")}\r\n//     return (\r\n//       <div>\r\n//         <h1>\r\n//           {firstname} {lastname}\r\n//         </h1>\r\n//         <Table color=\"purple\" key=\"purple\">\r\n//           <Table.Body>\r\n//             {Object.keys(this.state).pop().map(key =>\r\n//              (\r\n//               <Table.Row>\r\n//                 <Table.Cell>{key}</Table.Cell>\r\n//                 <Table.Cell>{this.state[key]}</Table.Cell>\r\n//               </Table.Row>\r\n//             ))}\r\n//           </Table.Body>\r\n//         </Table>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Payslip;\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Segment, Form } from \"semantic-ui-react\";\r\nimport Payslip from \"./Payslip\";\r\nimport moment from \"moment\";\r\n\r\nclass Dashboard extends Component {\r\n  state = {\r\n    isSubmitted: false,\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    superrate: \"\",\r\n    paydate: \"\",\r\n    payfreq: \"\",\r\n    annualsalary: \"\",\r\n    grossIncome: \"\",\r\n    incomeTax: \"\",\r\n    netIncome: \"\",\r\n    super: \"\",\r\n    pay: \"\"\r\n  };\r\n\r\n  // state = {\r\n  //   isSubmitted: false,\r\n  //   firstname: \"\",\r\n  //   lastname: \"\",\r\n  //   superrate: \"\",\r\n  //   \"Pay Date\": \"\",\r\n  //   \"Pay Frequency\": \"\",\r\n  //   \"Annual Income\": \"\",\r\n  //   \"Gross Income\": \"\",\r\n  //   \"Income tax\": \"\",\r\n  //   \"Net Income\": \"\",\r\n  //   \"Super\": \"\",\r\n  //   \"Pay\": \"\"\r\n  // };\r\n\r\n  handleInputChange = evt => {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  };\r\n\r\n  calculatePayslip = () => {\r\n    const { annualsalary, superrate } = this.state;\r\n    // console.log('annual salary', annualsalary)\r\n\r\n    if (0 <= annualsalary && annualsalary <= 18200) {\r\n      console.log(\"executed?\");\r\n      this.setState({ grossIncome: Math.floor(annualsalary / 12) });\r\n      this.setState({ incomeTax: 0 });\r\n      this.setState({ netIncome: Math.ceil(annualsalary / 12) });\r\n      this.setState({\r\n        super: Math.floor((annualsalary / 12) * (superrate / 100))\r\n      });\r\n      this.setState({\r\n        pay:\r\n          Math.floor(annualsalary / 12) - Math.floor((annualsalary / 12) * 0.09)\r\n      });\r\n      this.setState({\r\n        paydate: moment().format(\"DD MMMM gggg\"),\r\n        payfreq: \"monthly\"\r\n      });\r\n      // console.log('calculat func', this.state);\r\n    } else if (18201 <= annualsalary && annualsalary <= 37000) {\r\n      this.setState({\r\n        grossIncome: Math.floor(annualsalary / 12),\r\n        incomeTax: Math.ceil(((annualsalary - 18200) * 0.19) / 12),\r\n        netIncome:\r\n          Math.floor(annualsalary / 12) -\r\n          Math.ceil(((annualsalary - 18200) * 0.19) / 12),\r\n        super: Math.floor(Math.floor(annualsalary / 12) * (superrate / 100)),\r\n        pay:\r\n          Math.floor(annualsalary / 12 - ((annualsalary - 18200) * 0.19) / 12) -\r\n          Math.floor((annualsalary / 12) * (superrate / 100)),\r\n        paydate: moment().format(\"DD MMMM gggg\"),\r\n        payfreq: \"monthly\"\r\n      });\r\n    } else if (37001 <= annualsalary && annualsalary <= 80000) {\r\n      this.setState({\r\n        grossIncome: Math.floor(annualsalary / 12),\r\n        incomeTax: Math.ceil((3572 + (annualsalary - 37000) * 0.325) / 12),\r\n        netIncome:\r\n          Math.floor(annualsalary / 12) -\r\n          Math.ceil((3572 + (annualsalary - 37000) * 0.325) / 12),\r\n        super: Math.floor(Math.floor(annualsalary / 12) * (superrate / 100)),\r\n        pay:\r\n          Math.floor(annualsalary / 12) -\r\n          Math.ceil((3572 + (annualsalary - 37000) * 0.325) / 12) -\r\n          Math.floor(Math.floor(annualsalary / 12) * (superrate / 100)),\r\n        paydate: moment().format(\"DD MMMM gggg\"),\r\n        payfreq: \"monthly\"\r\n      });\r\n    } else if (80001 <= annualsalary && annualsalary <= 180000) {\r\n      this.setState({\r\n        grossIncome: Math.floor(annualsalary / 12),\r\n        incomeTax: Math.ceil((17547 + (annualsalary - 80000) * 0.37) / 12),\r\n        netIncome:\r\n          Math.floor(annualsalary / 12) -\r\n          Math.ceil((17547 + (annualsalary - 80000) * 0.37) / 12),\r\n        super: Math.floor(Math.floor(annualsalary / 12) * (superrate / 100)),\r\n        pay:\r\n          Math.floor(annualsalary / 12) -\r\n          Math.ceil((17547 + (annualsalary - 80000) * 0.37) / 12) -\r\n          Math.floor(Math.floor(annualsalary / 12) * (superrate / 100)),\r\n        paydate: moment().format(\"DD MMMM gggg\"),\r\n        payfreq: \"monthly\"\r\n      });\r\n    } else if (180001 <= annualsalary) {\r\n      this.setState({\r\n        grossIncome: Math.floor(annualsalary / 12),\r\n        incomeTax: Math.ceil((54547 + (annualsalary - 180000) * 0.45) / 12),\r\n        netIncome:\r\n          Math.floor(annualsalary / 12) -\r\n          Math.ceil((54547 + (annualsalary - 180000) * 0.45) / 12),\r\n        super: Math.floor(Math.floor(annualsalary / 12) * (superrate / 100)),\r\n        pay:\r\n          Math.floor(annualsalary / 12) -\r\n          Math.ceil((54547 + (annualsalary - 180000) * 0.45) / 12) -\r\n          Math.floor(Math.floor(annualsalary / 12) * (superrate / 100)),\r\n        paydate: moment().format(\"DD MMMM gggg\"),\r\n        payfreq: \"monthly\"\r\n      });\r\n    }\r\n    return;\r\n  };\r\n\r\n  handleSubmission = evt => {\r\n    evt.preventDefault();\r\n    this.setState({ isSubmitted: true });\r\n    this.calculatePayslip();\r\n    // console.log(this.state);\r\n  };\r\n\r\n  getDataFetch = async () => {\r\n    console.log(\"executed get!\");\r\n    const response = await fetch(\r\n      \"https://richard-nodeapi-test.herokuapp.com/users\",\r\n      { headers: { \"Content-Type\": \"application/json\" } }\r\n    );\r\n    console.log(await response.json());\r\n  };\r\n\r\n  postDataFetch = async () => {\r\n    console.log(\"executed post!\");\r\n    console.log(this.state);\r\n    const response = await fetch(\r\n      \"https://richard-nodeapi-test.herokuapp.com/users\",\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(this.state)\r\n      }\r\n    );\r\n    console.log(await response.json());\r\n  };\r\n\r\n  render() {\r\n    const { isSubmitted } = this.state;\r\n    return (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column witdth={10}>\r\n            <Segment>\r\n              <h1>Employee Info</h1>\r\n              <Form onSubmit={this.handleSubmission}>\r\n                <Form.Group widths=\"equal\">\r\n                  <Form.Input\r\n                    onChange={this.handleInputChange}\r\n                    name=\"firstname\"\r\n                    type=\"text\"\r\n                    fluid\r\n                    label=\"First name\"\r\n                    placeholder=\"First name\"\r\n                  />\r\n                  <Form.Input\r\n                    onChange={this.handleInputChange}\r\n                    name=\"lastname\"\r\n                    type=\"text\"\r\n                    fluid\r\n                    label=\"Last name\"\r\n                    placeholder=\"Last name\"\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group widths=\"equal\">\r\n                  <Form.Input\r\n                    onChange={this.handleInputChange}\r\n                    name=\"annualsalary\"\r\n                    type=\"number\"\r\n                    fluid\r\n                    label=\"Annual Salary\"\r\n                    placeholder=\"Annual Salary\"\r\n                  />\r\n                  <Form.Input\r\n                    onChange={this.handleInputChange}\r\n                    name=\"superrate\"\r\n                    type=\"number\"\r\n                    fluid\r\n                    label=\"Super Rate\"\r\n                    placeholder=\"Super Rate\"\r\n                  />\r\n                </Form.Group>\r\n                <Form.Button>Generate Payslip</Form.Button>\r\n              </Form>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column witdth={10}>\r\n            {isSubmitted && (\r\n              <Payslip data={this.state} getDataFetch={this.getDataFetch} postDataFetch={this.postDataFetch}/>\r\n            )}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\";\nimport HomePage from \"./components/HomePage\";\nimport Payslip from \"./components/Payslip\";\nimport Dashboard from './components/Dashboard'\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n        </Switch>\n\n        <Route\n          path=\"/(.+)\"\n          render={() => (\n            <div>\n              <Container className=\"main\">\n                <Switch>\n                  <Route path=\"/dashboard\" component={Dashboard} />\n                  <Route path=\"/payslip\" component={Payslip} />\n                </Switch>\n              </Container>\n            </div>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}